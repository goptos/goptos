package goesive

import (
	"bytes"
	b64 "encoding/base64"
	"log"
	"net/http"
	"os"
	"os/exec"
	"strings"

	"github.com/goptos/goptos/io"
)

func check(e error) {
	if e != nil {
		log.Printf("%s", e)
		panic(e)
	}
}

func exists(path string) bool {
	_, err := os.Stat(path)
	return !(os.IsNotExist(err))
}

func copyFile(src string, dst string) {
	log.Printf("Copying: %q to %q", src, dst)
	index, err := io.ReadFile(src)
	check(err)
	err = io.WriteFile(dst, index)
	check(err)
}

func createFile(data string, filePath string) {
	log.Printf("Checking: %q", filePath)
	if exists(filePath) {
		log.Printf("Already exists: %q", filePath)
		return
	}

	log.Printf("Creating: %q", filePath)
	f, err := os.Create(filePath)
	check(err)
	defer f.Close()

	str, err := b64.StdEncoding.DecodeString(data)
	check(err)

	_, err = f.WriteString(string(str))
	check(err)
	f.Sync()
}

// func createPath(path string) {
// 	log.Printf("Creating: %q", path)
// 	err := io.WritePath(path)
// 	check(err)
// }

func goRun(dir string, args ...string) {
	var HOME = os.Getenv("HOME")
	var PATH = os.Getenv("PATH")
	var TEMP = os.Getenv("TEMP")
	var TMP = os.Getenv("TMP")
	var LOCALAPPDATA = os.Getenv("LOCALAPPDATA")
	var GOMODCACHE = os.Getenv("GOMODCACHE")
	var GOPATH = os.Getenv("GOPATH")
	var GOPTOS_VERBOSE = os.Getenv("GOPTOS_VERBOSE")
	var stdOut bytes.Buffer
	var stdErr bytes.Buffer
	var cmd = exec.Command(args[0], args[1:]...)
	cmd.Stderr = &stdErr
	cmd.Stdout = &stdOut
	cmd.Dir = dir
	cmd.Env = []string{
		"PATH=" + PATH,
		"HOME=" + HOME,
		"TEMP=" + TEMP,
		"TMP=" + TMP,
		"LOCALAPPDATA=" + LOCALAPPDATA,
		"GOMODCACHE=" + GOMODCACHE,
		"GOPATH=" + GOPATH,
		"GOPTOS_VERBOSE=" + GOPTOS_VERBOSE,
		"GOOS=js",
		"GOARCH=wasm",
		"GONOPROXY=github.com/goptos"}
	log.Printf("%s\n", strings.Join(cmd.Env[1:], " "))
	log.Printf("%s\n", strings.Join(cmd.Args, " "))
	err := cmd.Run()
	if err != nil {
		log.Printf("stdErr\n%s", stdErr.String())
		log.Fatal(err)
	}
	if stdOut.String() != "" {
		log.Printf("stdOut\n%s", stdOut.String())
		log.Printf("")
	}
}

func Build(src string) {
	goRun(src, "go", "generate", "-v")
	goRun(src, "go", "build", "-o", "../dist/main.wasm", "main.go")
}

func Pack(dist string) {
	var wasm = dist + "/main.wasm"
	log.Printf("Checking: %q", wasm)
	if !exists(wasm) {
		log.Fatalf("Cannot package until %q has first been built.", wasm)
	}
	log.Printf("Already exists: %q", wasm)
	createFile(dataIndexJs, dist+"/index.js")
	createFile(dataWasmExec, dist+"/wasm_exec.js")
	copyFile("index.html", dist+"/index.html")
}

func Serve(src string, dist string, port string) {
	var listen = "localhost:" + port
	Build(src)
	Pack(dist)
	log.Printf("Listening on http://%s ...", listen)
	log.Fatal(http.ListenAndServe(listen, http.FileServer(http.Dir(dist))))
}

const dataIndexJs string = "Y29uc3QgZ28gPSBuZXcgR28oKTsKCldlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKGZldGNoKCJtYWluLndhc20iKSwgZ28uaW1wb3J0T2JqZWN0KS50aGVuKGFzeW5jIChyZXN1bHQpID0+IHsKICBhd2FpdCBnby5ydW4ocmVzdWx0Lmluc3RhbmNlKTsKfSk7"

const dataWasmExec string = ""
